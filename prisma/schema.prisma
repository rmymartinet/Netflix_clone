// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//sert à générer le client prisma pour pouvoir faire des requêtes à la base de données (CRUD) et pour pouvoir faire des migrations (créer des tables, des colonnes, etc...) et pour pouvoir faire des seeds (remplir la base de données avec des données) et pour pouvoir faire des introspections (voir le schéma de la base de données) 
generator client {
  provider = "prisma-client-js"
}

//sert à générer le schéma de la base de données
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  //updatedAt est une colonne qui va se mettre à jour automatiquement quand on va faire une modification sur un user
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId
  sessions       Session[]
  accounts       Account[]
}

//C'est ceux qu'on a besoin quand on se conncet avec google ou Github
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  //Connexion du model User au Account model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  sessionToken String   @unique
  userId       String?  @db.ObjectId
  expires      DateTime

  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title        String
  description  String
  videoUrl     String
  thumbnailUrl String
  genre        String
  duration     String
}
